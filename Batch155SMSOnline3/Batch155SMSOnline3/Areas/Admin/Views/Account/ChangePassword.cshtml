@model Batch155SMSOnline3.Models.User
@{
    ViewBag.Title = "ChangePassword";
    Layout = "~/Areas/Admin/Views/_LayoutDashboard.cshtml";
}

<style>
    .form-group small {
        color: #e74c3c;
        font-size: 16px;
        visibility: hidden;
    }

    .form-group.error small {
        visibility: visible;
    }
</style>

<section>
    <div class="container">
        @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { enctype = "multipart /form-data", @id = "form-material" }))
        {
            @Html.AntiForgeryToken()
            <hr />

            <h4>Change Password</h4>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Username)
            @Html.HiddenFor(model => model.Password)
            @Html.HiddenFor(model => model.FullName)
            @Html.HiddenFor(model => model.DateOfBirth)
            @Html.HiddenFor(model => model.Gender)
            @Html.HiddenFor(model => model.Address)
            @Html.HiddenFor(model => model.PhoneNumber)

            @Html.HiddenFor(model => model.IdentityCard)
            @Html.HiddenFor(model => model.UserRole)


            <div class="col-sm-4">
                <div class="form-group form-default form-static-label">
                    <label>Old Password</label>
                    <div>
                        <input type="password" name="oldPassword" id="oldPassword" class="form-control">
                        <small>Error message</small>
                        @if (ViewBag.errorPassword != null)
                        {
                            <p class="text-danger">@ViewBag.errorPassword</p>
                        }
                    </div>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="form-group form-default form-static-label">
                    <label>New Password</label>
                    <div>
                        <input type="password" name="newPassword" id="newPassword" class="form-control">
                        <small>Error message</small>
                    </div>
                </div>
            </div>



            <div class="col-sm-4">
                <div class="form-group form-default form-static-label">
                    <label>Confirm Password</label>
                    <div>
                        <input type="password" id="confirmPassword" class="form-control"/>
                        <small>Error message</small>
                    </div>

                </div>
            </div>
            <br />
            <div class="col-md-offset-2 col-md-2">
                <input type="submit" value="Change Password" class="btn btn-primary" />
            </div>
            <br />

        }
    </div>
</section>

<script>
    const form = document.getElementById('form-material');
    const oldPassword = document.getElementById('oldPassword');
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');


    form.addEventListener('submit', e => {
        if (!checkInputs()) e.preventDefault();


    });

    function checkInputs() {


        const oldPasswordValue = oldPassword.value;
        const newPasswordValue = newPassword.value;
        const confirmPasswordValue = confirmPassword.value;


        var oldPasswordBoolean = new Boolean(true);
        var newPasswordBoolean = new Boolean(true);
        var confirmPasswordBoolean = new Boolean(true);




        if (oldPasswordValue === '') {
            setErrorFor(oldPassword, 'Old Password cannot be blank');
            oldPasswordBoolean = false;
        }
        else {
            setSuccessFor(oldPassword)
        }


        if (newPasswordValue === '') {
            setErrorFor(newPassword, 'New Password cannot be blank');
            newPasswordBoolean = false;
        }
        else {
            setSuccessFor(newPassword)
        }

        if (confirmPasswordValue === '') {
            setErrorFor(confirmPassword, 'Confirm Password cannot be blank');
            confirmPasswordBoolean = false;
        } else if (newPasswordValue !== confirmPasswordValue) {
            setErrorFor(confirmPassword, 'Passwords does not match');
            confirmPasswordBoolean = false;
        }
        else {
            setSuccessFor(confirmPassword)
        }




        return (oldPasswordBoolean && newPasswordBoolean && confirmPasswordBoolean);

    }

    function setErrorFor(input, message) {
        const formControl = input.parentElement;
        const small = formControl.querySelector('small');
        formControl.className = 'form-group error';
        small.innerText = message;
    }

    function setSuccessFor(input) {
        const formControl = input.parentElement;
        formControl.className = 'form-group';
    }


</script>
