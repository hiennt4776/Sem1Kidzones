@model Batch155SMSOnline3.Models.Customer
@{
    ViewBag.Title = "ChangePassword";
    Layout = "~/Views/Shared/_LayoutSMS.cshtml";
}

<style>
    .form-group small {
        color: #e74c3c;
        font-size: 16px;
        visibility: hidden;
    }

    .form-group.error small {
        visibility: visible;
    }
</style>

<section>
    <div class="container">
        @using (Html.BeginForm("ChangePassword", "Customer", FormMethod.Post, new { enctype = "multipart/form-data", @id = "sign-up-form" }))
        {
            @Html.AntiForgeryToken()
            <hr />

            <h4>Change Password</h4>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Username)
            @Html.HiddenFor(model => model.CustomerName)
            @Html.HiddenFor(model => model.Gender)
            @Html.HiddenFor(model => model.Email)
            @Html.HiddenFor(model => model.PhoneNumber)
            @Html.HiddenFor(model => model.Password)
            @Html.HiddenFor(model => model.VerifyCode)
            @Html.HiddenFor(model => model.Active)
            @Html.HiddenFor(model => model.DateOfBirth)
            @Html.HiddenFor(model => model.Address)
            @Html.HiddenFor(model => model.DateOfRegistration)
            @Html.HiddenFor(model => model.MaritalStatusId)
            @Html.HiddenFor(model => model.Hobbies)
            @Html.HiddenFor(model => model.Likes)
            @Html.HiddenFor(model => model.Dislike)
            @Html.HiddenFor(model => model.Cuisines)
            @Html.HiddenFor(model => model.Sports)
            @Html.HiddenFor(model => model.Image)
            @Html.HiddenFor(model => model.Qualification)
            @Html.HiddenFor(model => model.School)
            @Html.HiddenFor(model => model.College)
            @Html.HiddenFor(model => model.WorkStatus)
            @Html.HiddenFor(model => model.Organization)
            @Html.HiddenFor(model => model.Designation)
            @Html.HiddenFor(model => model.SpeedSMSAPI)
            @Html.HiddenFor(model => model.deviceID)


            <div class="col-sm-4">
                <div class="form-group">
                    <label>Old Password</label>
                    <input type="password" name="oldPassword" id="oldPassword">
                    <small>Error message</small>
                    @if (ViewBag.errorPassword != null)
                    {
                        <p class="text-danger">@ViewBag.errorPassword</p>
                    }
                </div>
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    <label>New Password</label>
                    <input type="password" name="newPassword" id="newPassword">
                    <small>Error message</small>
                </div>
            </div>



            <div class="col-sm-4">
                <div class="form-group">
                    <label>Confirm Password</label>
                    <div>
                        <input type="password" id="confirmPassword" />
                        <small>Error message</small>
                    </div>

                </div>
            </div>
            <br />
            <div class="col-md-offset-2 col-md-2">
                <input type="submit" value="Change Password" class="btn btn-default" />
            </div>
            <br />

        }
    </div>
</section>

<script>
    const form = document.getElementById('sign-up-form');
    const oldPassword = document.getElementById('oldPassword');
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');
  

    form.addEventListener('submit', e => {
        if (!checkInputs()) e.preventDefault();


    });

    function checkInputs() {

       
        const oldPasswordValue = oldPassword.value;
        const newPasswordValue = newPassword.value;
        const confirmPasswordValue = confirmPassword.value;
     

        var oldPasswordBoolean = new Boolean(true);
        var newPasswordBoolean = new Boolean(true);
        var confirmPasswordBoolean = new Boolean(true);
        



        if (oldPasswordValue === '') {
            setErrorFor(oldPassword, 'Old Password cannot be blank');
            oldPasswordBoolean = false;
        }
        else {
            setSuccessFor(oldPassword)
        }


        if (newPasswordValue === '') {
            setErrorFor(newPassword, 'New Password cannot be blank');
            newPasswordBoolean = false;
        }
        else {
            setSuccessFor(newPassword)
        }

        if (confirmPasswordValue === '') {
            setErrorFor(confirmPassword, 'Confirm Password cannot be blank');
            confirmPasswordBoolean = false;
        } else if (newPasswordValue !== confirmPasswordValue) {
            setErrorFor(confirmPassword, 'Passwords does not match');
            confirmPasswordBoolean = false;
        }
        else {
            setSuccessFor(confirmPassword)
        }


        

        return (oldPasswordBoolean && newPasswordBoolean && confirmPasswordBoolean);

    }

    function setErrorFor(input, message) {
        const formControl = input.parentElement;
        const small = formControl.querySelector('small');
        formControl.className = 'form-group error';
        small.innerText = message;
    }

    function setSuccessFor(input) {
        const formControl = input.parentElement;
        formControl.className = 'form-group';
    }


</script>
