@model Batch155SMSOnline3.Models.Customer
@{
    ViewBag.Title = "ChangePassword";
    Layout = "~/Views/Shared/_LayoutSMS.cshtml";
}

<style>
    .form-group small {
        color: #e74c3c;
        font-size: 16px;
        visibility: hidden;
    }

    .form-group.error small {
        visibility: visible;
    }
</style>

<section>
    <br />
    <div class="container">
        <br />
        <h4>Set API and device ID</h4>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/MWj1BPn09Z4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/6adrSiJ_zYU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        @using (Html.BeginForm("ApiIdDevice", "Customer", FormMethod.Post, new { enctype = "multipart/form-data", @id = "sign-up-form" }))
        {
            @Html.AntiForgeryToken()
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Username)
            @Html.HiddenFor(model => model.CustomerName)
            @Html.HiddenFor(model => model.Gender)
            @Html.HiddenFor(model => model.Email)
            @Html.HiddenFor(model => model.PhoneNumber)
            @Html.HiddenFor(model => model.Password)
            @Html.HiddenFor(model => model.VerifyCode)
            @Html.HiddenFor(model => model.Active)
            @Html.HiddenFor(model => model.DateOfBirth)
            @Html.HiddenFor(model => model.Address)
            @Html.HiddenFor(model => model.DateOfRegistration)
            @Html.HiddenFor(model => model.MaritalStatusId)
            @Html.HiddenFor(model => model.Hobbies)
            @Html.HiddenFor(model => model.Likes)
            @Html.HiddenFor(model => model.Dislike)
            @Html.HiddenFor(model => model.Cuisines)
            @Html.HiddenFor(model => model.Sports)
            @Html.HiddenFor(model => model.Image)
            @Html.HiddenFor(model => model.Qualification)
            @Html.HiddenFor(model => model.School)
            @Html.HiddenFor(model => model.College)
            @Html.HiddenFor(model => model.WorkStatus)
            @Html.HiddenFor(model => model.Organization)
            @Html.HiddenFor(model => model.Designation)
           

            @*@Html.HiddenFor(model => model.SpeedSMSAPI)
                @Html.HiddenFor(model => model.deviceID)*@

            <div class="col-sm-8">
                <div class="form-group">
                    <label>API access token:</label>
                    <input type="text" name="speedSMSAPI" id="speedSMSAPI">
                    <small>Error message</small>
                </div>
            </div>
            <div class="col-sm-8">
                <div class="form-group">
                    <label>device ID</label>
                    <input type="text" name="deviceID" id="deviceID">
                    <small>Error message</small>
                </div>
            </div>




            <br />
            <div class="col-md-offset-2 col-md-2">
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
            <br />

        }
    </div>
</section>

<script>
    const form = document.getElementById('sign-up-form');
    const speedSMSAPI = document.getElementById('speedSMSAPI');
    const deviceID = document.getElementById('deviceID');
   


    form.addEventListener('submit', e => {
        if (!checkInputs()) e.preventDefault();


    });

    function checkInputs() {


        const speedSMSAPIValue = speedSMSAPI.value;
        const deviceIDValue = deviceID.value;
      


        var speedSMSAPIBoolean = new Boolean(true);
        var deviceIDBoolean = new Boolean(true);
 



        if (speedSMSAPIValue === '') {
            setErrorFor(speedSMSAPI, 'speed SMS API cannot be blank');
            deviceIDBoolean = false;
        }
        else {
            setSuccessFor(speedSMSAPI)
        }


        if (deviceIDValue === '') {
            setErrorFor(deviceID, 'deviceID cannot be blank');
            deviceIDBoolean = false;
        }
        else {
            setSuccessFor(deviceID)
        }

        




        return (speedSMSAPIBoolean && deviceIDBoolean);

    }

    function setErrorFor(input, message) {
        const formControl = input.parentElement;
        const small = formControl.querySelector('small');
        formControl.className = 'form-group error';
        small.innerText = message;
    }

    function setSuccessFor(input) {
        const formControl = input.parentElement;
        formControl.className = 'form-group';
    }


</script>


